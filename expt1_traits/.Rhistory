# first try for exponential phase:
# test for overall fast vs slow growth strategy across all 4 temperatures
exp_rank.df <- median_mu.df %>% filter(Inoculum == "Exponential") %>%
pivot_wider(names_from = Temp, values_from = medMu)
KendallW(exp_rank.df[,-1*(1:2)], correct = TRUE, test = TRUE)
# and for stationary phase
# test for overall fast vs slow growth strategy across all 4 temperatures
sta_rank.df <- median_mu.df %>% filter(Inoculum == "Stationary") %>%
pivot_wider(names_from = Temp, values_from = medMu)
KendallW(sta_rank.df[,-1*(1:2)], correct = TRUE, test = TRUE)
# the thing is that we are not interested in exponential or stationary phase *PER SE*
# we are using these different cell physiologies as a way to make our results more generalizable
# so let's average across these different phases:
mean_median_mu.df <- median_mu.df %>% ungroup() %>% group_by(Species, Temp) %>%
summarise(mu_acrossInoc = mean(medMu))
ranks_acrossInoc.df <- mean_median_mu.df %>% pivot_wider(names_from = Temp, values_from = mu_acrossInoc)
KendallW(ranks_acrossInoc.df[,-1*(1:2)], correct = TRUE, test = TRUE)
# clean up
rm(median_mu.df, mean_median_mu.df)
################################
# consider the 4 SPECIES that do not change their rank order
################################
ranks_4species.df <- Dil_growthrates.df %>% filter(Species_in_Expt2 == TRUE) %>%
group_by(Inoculum, Species, Temp) %>%
summarise(medMu = median(mu))
# first check exponential and stationary phase data separately:
# exponential phase:
exp4SP_rank.df <- ranks_4species.df %>% filter(Inoculum == "Exponential") %>%
pivot_wider(names_from = Temp, values_from = medMu)
KendallW(exp4SP_rank.df[,-1*(1:2)], correct = TRUE, test = TRUE)
# stationary phase:
sta4SP_rank.df <- ranks_4species.df%>% filter(Inoculum == "Stationary") %>%
pivot_wider(names_from = Temp, values_from = medMu)
KendallW(sta4SP_rank.df[,-1*(1:2)], correct = TRUE, test = TRUE)
# finally check the combined data for both inocula
mean_median_mu.df <- ranks_4species.df %>% ungroup() %>% group_by(Species, Temp) %>%
summarise(mu_acrossInoc = mean(medMu))
acrossInoc_4SP_rank <- mean_median_mu.df %>% pivot_wider(names_from = Temp, values_from = mu_acrossInoc)
KendallW(acrossInoc_4SP_rank[,-1*(1:2)], correct = TRUE, test = TRUE)
################################
# just the exact 4 STRAINS used in Expt 2
################################
ranks_4strains.df <- Dil_growthrates.df %>% select(Sample, Temp, Inoculum, mu) %>%
filter(Sample %in% c("BSC001", "CK101", "BSC019", "BSC005"))
# first check exponential and stationary phase data separately:
# exponential phase:
exp4STR_rank.df <- ranks_4strains.df %>% filter(Inoculum == "Exponential") %>%
pivot_wider(names_from = Temp, values_from = mu)
KendallW(exp4STR_rank.df[,-1*(1:2)], correct = TRUE, test = TRUE)
# stationary phase:
sta4STR_rank.df <- ranks_4strains.df %>% filter(Inoculum == "Stationary") %>%
pivot_wider(names_from = Temp, values_from = mu)
KendallW(sta4STR_rank.df[,-1*(1:2)], correct = TRUE, test = TRUE)
# finally check the combined data for both inocula
mean_median_mu.df <- ranks_4strains.df %>% ungroup() %>% group_by(Sample, Temp) %>%
summarise(mu_acrossInoc = mean(mu))
acrossInoc_4STR_rank <- mean_median_mu.df %>% pivot_wider(names_from = Temp, values_from = mu_acrossInoc)
KendallW(acrossInoc_4STR_rank[,-1*(1:2)], correct = TRUE, test = TRUE)
# clean up
rm(ranks_4strains.df, mean_median_mu.df, ranks_4species.df)
# first, exponential phase:
cor.test(exp_rank.df$`25`, exp_rank.df$`40`, method = "spearman")
cor.test(exp_rank.df$`30`, exp_rank.df$`40`, method = "spearman")
# then for stationary phase
cor.test(sta_rank.df$`25`, sta_rank.df$`40`, method = "spearman")
cor.test(sta_rank.df$`30`, sta_rank.df$`40`, method = "spearman")
# finally try also for the combined data of exponential & stationary phase
cor.test(ranks_acrossInoc.df$`25`, ranks_acrossInoc.df$`40`, method = "spearman")
cor.test(ranks_acrossInoc.df$`30`, ranks_acrossInoc.df$`40`, method = "spearman")
# use Spearmanâ€™s Rank Correlation Coefficient to test for correlation between ambient and extreme
################################
# consider the 4 SPECIES that do not change their rank order
################################
# first, exponential phase:
cor.test(exp4SP_rank.df$`25`, exp4SP_rank.df$`40`, method = "spearman")
cor.test(exp4SP_rank.df$`30`, exp4SP_rank.df$`40`, method = "spearman")
# then stationary phase
cor.test(sta4SP_rank.df$`25`, sta4SP_rank.df$`40`, method = "spearman")
cor.test(sta4SP_rank.df$`30`, sta4SP_rank.df$`40`, method = "spearman")
# finally check the combined data for both inocula
cor.test(acrossInoc_4SP_rank$`25`, acrossInoc_4SP_rank$`40`, method = "spearman")
cor.test(acrossInoc_4SP_rank$`30`, acrossInoc_4SP_rank$`40`, method = "spearman")
################################
# try the exact 4 STRAINS used in Expt 2
################################
# first, exponential phase:
cor.test(exp4STR_rank.df$`25`, exp4STR_rank.df$`40`, method = "spearman")
cor.test(exp4STR_rank.df$`30`, exp4STR_rank.df$`40`, method = "spearman")
# then stationary phase
cor.test(sta4STR_rank.df$`25`, sta4STR_rank.df$`40`, method = "spearman")
cor.test(sta4STR_rank.df$`30`, sta4STR_rank.df$`40`, method = "spearman")
# finally check the combined data for both inocula
cor.test(acrossInoc_4STR_rank$`25`, acrossInoc_4STR_rank$`40`, method = "spearman")
cor.test(acrossInoc_4STR_rank$`30`, acrossInoc_4STR_rank$`40`, method = "spearman")
# clean up
rm(exp_rank.df, exp4STR_rank.df, exp4SP_rank.df, sta_rank.df, sta4SP_rank.df, sta4STR_rank.df, acrossInoc_4SP_rank, acrossInoc_4STR_rank, ranks_acrossInoc.df)
resist_mu <- Dil_growthrates.df %>% select(Sample, Species, Temp, Inoculum, mu) %>%
pivot_wider(names_from = Temp, names_prefix="mu_Temp", values_from = mu)
####################
# mu at 25C predicting mu at 40C
####################
# fit a linear model where mu at 25C predicts mu at 40C but with random effect of species ... (if we're here anyway, test if Inoculum has any effect)
tmpLM0_mu_25 <- glmmTMB(mu_Temp40 ~ mu_Temp25, # fixed effect only
data = resist_mu)
tmpLMM0_mu <- glmmTMB(mu_Temp40 ~ (1|Species), # random effect NULL MODEL!!!
data = resist_mu)
tmpLMM_mu_25 <- glmmTMB(mu_Temp40 ~ mu_Temp25 + (1|Species),
data = resist_mu)
tmpLMM2_mu_25 <- glmmTMB(mu_Temp40 ~ mu_Temp25 + (1|Inoculum),
data = resist_mu)
tmpLMM3_mu_25 <- glmmTMB(mu_Temp40 ~ mu_Temp25 + (1|Species) + (1|Inoculum),
data = resist_mu)
BIC(tmpLM0_mu_25, tmpLMM0_mu, tmpLMM_mu_25, tmpLMM2_mu_25, tmpLMM3_mu_25) %>% arrange(BIC)
# the null model with random effect of species is the best model
anova(tmpLMM0_mu, tmpLMM_mu_25)
rm(tmpLM0_mu_25, tmpLMM2_mu_25, tmpLMM3_mu_25)
# BUT we are NOT INTERESTED in the null model with only random effect of species!!!
# okay so it seems that my intuition was right that a model with random effect of species is best. Let's plot it & see it's effect sizes and explanatory power
tmp_resist_mu <- cbind(resist_mu,
predicted = predict(tmpLMM_mu_25, type="response"),
resid = residuals(tmpLMM_mu_25))
ggplot(tmp_resist_mu,
aes(x=mu_Temp25, y=mu_Temp40, colour=Species, shape=Inoculum)) +
geom_point(alpha=0.5) +
geom_line(aes(y = predicted, group = Species)) +
scale_colour_manual(values=ALLsp_palette) +
labs(x="Growth rate at 25C", y="Growth rate at 40C")
summary(tmpLMM_mu_25)
emmeans(tmpLMM_mu_25, ~ mu_Temp25, type="response")
efronRSquared(residual = tmp_resist_mu$resid,
predicted = tmp_resist_mu$predicted,
statistic = "EfronRSquared")
# hahhahhaha, I love this r-squared value! I guess the random effect of species is actually a great fit. We already saw this from the BIC model comparison above.
rm(tmpLMM_mu_25, tmp_resist_mu)
####################
# mu at 30C predicting mu at 40C
####################
# fit a linear model where mu at 30C predicts mu at 40C but with random effect of species ... (if we're here anyway, test if Inoculum has any effect)
tmpLM0_mu_30 <- glmmTMB(mu_Temp40 ~ mu_Temp30, # fixed effect only
data = resist_mu)
tmpLMM0_mu <- glmmTMB(mu_Temp40 ~ (1|Species), # random effect NULL MODEL!!!
data = resist_mu)
tmpLMM_mu_30 <- glmmTMB(mu_Temp40 ~ mu_Temp30 + (1|Species),
data = resist_mu)
tmpLMM2_mu_30 <- glmmTMB(mu_Temp40 ~ mu_Temp30 + (1|Inoculum),
data = resist_mu)
tmpLMM3_mu_30 <- glmmTMB(mu_Temp40 ~ mu_Temp30 + (1|Species) + (1|Inoculum),
data = resist_mu)
BIC(tmpLM0_mu_30, tmpLMM0_mu, tmpLMM_mu_30, tmpLMM2_mu_30, tmpLMM3_mu_30) %>% arrange(BIC)
# the null model with random effect of species is the best model
anova(tmpLMM0_mu, tmpLMM_mu_30)
rm(tmpLM0_mu_30, tmpLMM0_mu, tmpLMM2_mu_30, tmpLMM3_mu_30)
# BUT we are NOT INTERESTED in the null model with only random effect of species!!!
# again my intuition was right. Let's plot & analyze the model of interest
tmp_resist_mu <- cbind(resist_mu,
predicted = predict(tmpLMM_mu_30, type="response"),
resid = residuals(tmpLMM_mu_30))
ggplot(tmp_resist_mu,
aes(x=mu_Temp30, y=mu_Temp40, colour=Species, shape=Inoculum)) +
geom_point(alpha=0.5) +
geom_line(aes(y = predicted, group = Species)) +
scale_colour_manual(values=ALLsp_palette) +
labs(x="Growth rate at 30C", y="Growth rate at 40C")
summary(tmpLMM_mu_30)
emmeans(tmpLMM_mu_30, ~ mu_Temp30, type="response")
efronRSquared(residual = tmp_resist_mu$resid,
predicted = tmp_resist_mu$predicted,
statistic = "EfronRSquared")
# again, this great explanatory power is coming purely from the random effect of species
rm(tmpLMM_mu_30, tmp_resist_mu)
####################
# mu at 25C predicting relative CFU at 40C
####################
resist_CFU <- inner_join(resist_mu %>% select(-mu_Temp35, -mu_Temp40),
CFU_survival.df %>% filter(Temp == 40) %>% select(-Shape, -temp_as_factor),
by = c("Sample", "Species", "Inoculum"))
# fit a linear model where mu at 25C predicts relative CFU at 40C but with random effect of species ... (if we're here anyway, test if Inoculum has any effect)
tmpLM0_CFU_25 <- glmmTMB(mean_surviv ~ mu_Temp25, # fixed effect only
data = resist_CFU)
tmpLMM0_CFU <- glmmTMB(mean_surviv ~ (1|Species), # random effect NULL MODEL!!!
data = resist_CFU)
tmpLMM_CFU_25 <- glmmTMB(mean_surviv ~ mu_Temp25 + (1|Species),
data = resist_CFU)
tmpLMM2_CFU_25 <- glmmTMB(mean_surviv ~ mu_Temp25 + (1|Inoculum),
data = resist_CFU)
tmpLMM3_CFU_25 <- glmmTMB(mean_surviv ~ mu_Temp25 + (1|Species) + (1|Inoculum),
data = resist_CFU)
BIC(tmpLM0_CFU_25, tmpLMM0_CFU, tmpLMM_CFU_25, tmpLMM2_CFU_25, tmpLMM3_CFU_25) %>% arrange(BIC)
# the null model with random effect of species is the best model
anova(tmpLMM0_CFU, tmpLMM_CFU_25)
rm(tmpLM0_CFU_25, tmpLMM2_CFU_25, tmpLMM3_CFU_25)
# BUT we are NOT INTERESTED in the null model with only random effect of species!!!
# again my intuition was right. Let's plot & analyze the model of interest
tmp_resist_CFU <- cbind(resist_CFU,
predicted = predict(tmpLMM_CFU_25, type="response"),
resid = residuals(tmpLMM_CFU_25))
ggplot(tmp_resist_CFU,
aes(x=mu_Temp25, y=mean_surviv, colour=Species, shape=Inoculum)) +
geom_point(alpha=0.5) +
geom_line(aes(y = predicted, group = Species)) +
scale_colour_manual(values=ALLsp_palette) +
labs(x="Growth rate at 25C", y="Relative CFU at 40C")
summary(tmpLMM_CFU_25)
emmeans(tmpLMM_CFU_25, ~ mu_Temp25, type="response")
efronRSquared(residual = tmp_resist_CFU$resid,
predicted = tmp_resist_CFU$predicted,
statistic = "EfronRSquared")
# again, this high explanatory power is coming purely from the random effect of species
rm(tmpLMM_CFU_25, tmp_resist_CFU)
####################
# mu at 30C predicting relative CFU at 40C
####################
# fit a linear model where mu at 30C predicts relative CFU at 40C but with random effect of species ... (if we're here anyway, test if Inoculum has any effect)
tmpLM0_CFU_30 <- glmmTMB(mean_surviv ~ mu_Temp30, # fixed effect only
data = resist_CFU)
tmpLMM_CFU_30 <- glmmTMB(mean_surviv ~ mu_Temp30 + (1|Species),
data = resist_CFU)
tmpLMM2_CFU_30 <- glmmTMB(mean_surviv ~ mu_Temp30 + (1|Inoculum),
data = resist_CFU)
tmpLMM3_CFU_30 <- glmmTMB(mean_surviv ~ mu_Temp30 + (1|Species) + (1|Inoculum),
data = resist_CFU)
BIC(tmpLM0_CFU_30, tmpLMM0_CFU, tmpLMM_CFU_30, tmpLMM2_CFU_30, tmpLMM3_CFU_30) %>% arrange(BIC)
# HA! finally the mixed model is at least as good as the null model!
anova(tmpLMM0_CFU, tmpLMM_CFU_30)
rm(tmpLM0_CFU_30, tmpLMM2_CFU_30, tmpLMM3_CFU_30, tmpLMM0_CFU)
# great, now we are even justified to get rid of the null model :)
# Let's plot & analyze the top model
tmp_resist_CFU <- cbind(resist_CFU,
predicted = predict(tmpLMM_CFU_30, type="response"),
resid = residuals(tmpLMM_CFU_30))
ggplot(tmp_resist_CFU,
aes(x=mu_Temp30, y=mean_surviv, colour=Species, shape=Inoculum)) +
geom_point(alpha=0.5) +
geom_line(aes(y = predicted, group = Species)) +
scale_colour_manual(values=ALLsp_palette) +
labs(x="Growth rate at 30C", y="Relative CFU at 40C")
summary(tmpLMM_CFU_30)
# the trouble here is that the model is only very slightly significant and we probably need to correct for multiple testing...
emmeans(tmpLMM_CFU_30, ~ mu_Temp30, type="response")
# in fact, so slight that the effect size is not quite significant
efronRSquared(residual = tmp_resist_CFU$resid,
predicted = tmp_resist_CFU$predicted,
statistic = "EfronRSquared")
rm(tmpLMM_CFU_30, tmp_resist_CFU)
growthrates_40vs35 <- Dil_growthrates.df %>% filter(Temp > 30) %>%
select(Sample, Temp, Inoculum, mu) %>%
pivot_wider(names_from = Temp,
names_glue = "{.value}{Temp}",
values_from = mu) %>%
mutate(diff = mu35 - mu40)
# check for normality using the shapiro-wilk test
shapiro.test(growthrates_40vs35$diff)
# looks like the data is not normal... weeellll, the shapiro-wilk test is quite sensitive and a t-test should anyway be quite robust to violations from Normality...
# go ahead and run the paired t-test anyway
with(growthrates_40vs35, t.test(x = mu35, y = mu40, paired = TRUE))
# and for good measure, also run the two-sided Wilcoxon signed rank test
with(growthrates_40vs35, wilcox.test(x = mu35, y = mu40, paired = TRUE))
# clean up
rm(growthrates_40vs35)
# first let's smooth out the data (we will need to do this for estimating the derivatives anyway)
smoothed_ALL.df <- ALL_data.df %>% ungroup() %>%
mutate(smooth_med3 = smooth_data(x = Time,
y = OD,
subset_by = uniqID,
sm_method = "moving-median",
window_width_n = 3),
smoothOD = smooth_data(x = Time,
y = smooth_med3,
subset_by = uniqID,
sm_method = "moving-average",
window_width_n = 3))
smoothed_ALL.df <- smoothed_ALL.df %>% mutate(smth_baselinedOD = smoothOD - medianBlankOD)
# add the option to keep just the growth curves that were high quality enough to analyze for TTD
# e.g., exclude growth curves that were inoculated with too few cells
smoothed_ALL.df$Dilution <- as.numeric(levels(smoothed_ALL.df$Dilution))[smoothed_ALL.df$Dilution] # temporarily change class for compatible joining
smoothed_ALL.df <- left_join(smoothed_ALL.df,
TTD.df %>% select(Temp, Sample, Dilution, Inoculum, uniqID, Species, TTD_0.05, TTD_0.13))
smoothed_ALL.df$Dilution <- as.factor(smoothed_ALL.df$Dilution) # change back to factor because it's more convenient for plotting
#########################
# plot P. protegens
#########################
temp_data_for_plotting <- rbind(smoothed_ALL.df %>%
filter(Species == "P. protegens",
!is.na(TTD_0.13)),
# replicates at 40C were excluded from TTD so need to add them back in manually for plotting
smoothed_ALL.df %>%
filter(Species == "P. protegens",
Temp == 40))
ggplot(temp_data_for_plotting,
aes(y = smth_baselinedOD, x = Time, colour = Dilution, group = uniqID)) +
facet_wrap(vars(Temp)) +
scale_y_log10(limits=c(0.005,1.1)) +
geom_line(alpha=0.5) +
labs(x="Time (hrs)", y="A600 (baselined OD)")
# wells that failed to grow seemed to have had condensation early on
# this obscures the information we are trying to present so let's try to exclude all wells that failed to grow
temp <- temp_data_for_plotting %>% group_by(uniqID, Temp, Dilution, Sample) %>%
summarise(medOD = median(smth_baselinedOD, na.rm=TRUE))
these_grew <- temp$uniqID[temp$medOD > 0.02]
ggplot(temp_data_for_plotting %>% filter(uniqID %in% these_grew),
aes(y = smth_baselinedOD, x = Time, colour = Dilution, group = uniqID)) +
facet_wrap(vars(Temp)) +
scale_y_log10(limits=c(0.005,1.1)) +
geom_line(alpha=0.5) +
labs(x="Time (hrs)", y="Total Biomass (OD at 600nm)", title="P. protegens")
#########################
# for comparison, plot P. veronii
#########################
temp_data_for_plotting <- rbind(smoothed_ALL.df %>%
filter(Species == "P. veronii",
!is.na(TTD_0.05)),
# replicates at 40C were excluded from TTD so need to add them back in manually for plotting
smoothed_ALL.df %>%
filter(Species == "P. veronii",
Temp == 40,
Dilution != "1e-06"))
ggplot(temp_data_for_plotting,
aes(y = smth_baselinedOD, x = Time, colour = Dilution, group = uniqID)) +
facet_wrap(vars(Temp)) +
scale_y_log10(limits=c(0.005,1.5)) +
geom_line(alpha=0.5) +
labs(x="Time (hrs)", y="Total Biomass (OD at 600nm)", title="P. veronii")
#########################
# for comparison, plot P. grimontii
#########################
temp_data_for_plotting <- rbind(smoothed_ALL.df %>%
filter(Species == "P. grimontii",
!is.na(TTD_0.05)),
# replicates at 40C were excluded from TTD so need to add them back in manually for plotting
smoothed_ALL.df %>%
filter(Species == "P. grimontii",
Temp == 40))
ggplot(temp_data_for_plotting,
aes(y = smth_baselinedOD, x = Time, colour = Dilution, group = uniqID)) +
facet_wrap(vars(Temp)) +
scale_y_log10(limits=c(0.005,1.5)) +
geom_line(alpha=0.5) +
labs(x="Time (hrs)", y="Total Biomass (OD at 600nm)", title="P. grimontii")
# clean up
rm(temp_data_for_plotting, temp, these_grew)
load("all_growthcurve_data.RData")
for(sam in c("BSC001", "BSC005", "BSC019", "CK101")){
for(deg in c(25, 30, 35, 40)){
print(ggplot(derivs.df %>% filter(Sample == sam,
Temp == deg,
baselinedOD > 0.02,
baselinedOD < 0.6),
aes(x=baselinedOD, y=percap_deriv, colour=as.factor(Inoculum), group = uniqID)) +
# plot the 95% CI of the intrinsic growth rates as a ribbon
geom_ribbon(aes(ymin=Dil_growthrates.df$mu_lwrCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Exponential")],
ymax=Dil_growthrates.df$mu_uprCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Exponential")]),
fill = "#fccecb", colour = NA) +
# plot the 95% CI of the intrinsic growth rates as a ribbon
geom_ribbon(aes(ymin=Dil_growthrates.df$mu_lwrCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Stationary")],
ymax=Dil_growthrates.df$mu_uprCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Stationary")]),
fill = "#b0fdff", colour = NA) +
# add a vertical line for the threshold of detection (0.05)
geom_vline(xintercept = 0.05) +
# plot the derivatives as lines
geom_line(alpha=0.4) +
# and plot the intrinsic growth rate estimates from the TTD as dashed lines
geom_hline(yintercept = Dil_growthrates.df$mu[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Exponential")],
linetype="dashed", colour="#f8766d") +
geom_hline(yintercept = Dil_growthrates.df$mu[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Stationary")],
linetype="dashed", colour="#00bfc4") +
labs(title=paste(unique(Dil_growthrates.df$Species[which(Dil_growthrates.df$Sample == sam)]),
deg,"*C"),
colour="Inoculum",
x = "Total Biomass (OD at 600nm)",
y = "Per Capita Derivative"))
}
}
load("all_growthcurve_data.RData")
View(Dil_growthrates.df)
derivs.df
derivs.df %>% filter(Sample == "CK101", Temp == 25)
derivs.df %>% filter(Sample == "CK101", Temp == 25) %>% group_by(Inoculum, uniqID) %>% summarise(max_deriv = max(percap_deriv))
derivs.df %>% filter(Sample == "CK101", Temp == 25) %>% group_by(Inoculum, uniqID) %>% summarise(max_deriv = max(percap_deriv, na.rm=TRUE))
derivs.df %>% filter(Sample == "CK101", Temp == 25) %>% group_by(Inoculum, uniqID) %>% summarise(max_deriv = max(percap_deriv, na.rm=TRUE)) %>% View()
mean(c(1.24, 1.33, 1.23, 1.26, 1.26, 1.22, 1.25, 1.23, 1.26, 1.27, 1.19, 1.21, 1.2, 1.16))
TTD.df %>% filter(Sample == "CK101", Temp == 25)
Dil_growthrates.df %>% filter(Sample == "CK101", Temp == 25)
(1.236429-0.75)/0.75
(0.9-0.6)/0.6
TTD.df %>% filter(Sample == "CK101", Temp == 25) %>% View()
derivs.df %>% filter(Sample == "CK101", Temp == 25) %>% View()
load("all_growthcurve_data.RData")
for(sam in c("BSC001", "BSC005", "BSC019", "CK101")){
for(deg in c(25, 30, 35, 40)){
print(ggplot(derivs.df %>% filter(Sample == sam,
Temp == deg,
baselinedOD > 0.02,
baselinedOD < 0.6),
aes(x=smth_baselinedOD, y=percap_deriv, colour=as.factor(Inoculum), group = uniqID)) +
# plot the 95% CI of the intrinsic growth rates as a ribbon
geom_ribbon(aes(ymin=Dil_growthrates.df$mu_lwrCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Exponential")],
ymax=Dil_growthrates.df$mu_uprCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Exponential")]),
fill = "#fccecb", colour = NA) +
# plot the 95% CI of the intrinsic growth rates as a ribbon
geom_ribbon(aes(ymin=Dil_growthrates.df$mu_lwrCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Stationary")],
ymax=Dil_growthrates.df$mu_uprCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Stationary")]),
fill = "#b0fdff", colour = NA) +
# add a vertical line for the threshold of detection (0.05)
geom_vline(xintercept = 0.05) +
# plot the derivatives as lines
geom_line(alpha=0.4) +
# and plot the intrinsic growth rate estimates from the TTD as dashed lines
geom_hline(yintercept = Dil_growthrates.df$mu[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Exponential")],
linetype="dashed", colour="#f8766d") +
geom_hline(yintercept = Dil_growthrates.df$mu[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Stationary")],
linetype="dashed", colour="#00bfc4") +
labs(title=paste(unique(Dil_growthrates.df$Species[which(Dil_growthrates.df$Sample == sam)]),
deg,"*C"),
colour="Inoculum",
x = "Total Biomass (OD at 600nm)",
y = "Per Capita Derivative"))
}
}
for(sam in c("BSC001", "BSC005", "BSC019", "CK101")){
for(deg in c(25, 30, 35, 40)){
print(ggplot(derivs.df %>% filter(Sample == sam,
Temp == deg,
baselinedOD > 0.02,
baselinedOD < 0.6),
aes(x=smth_baselinedOD, y=percap_deriv, colour=as.factor(Inoculum), group = uniqID)) +
# plot the 95% CI of the intrinsic growth rates as a ribbon
geom_ribbon(aes(ymin=Dil_growthrates.df$mu_lwrCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Exponential")],
ymax=Dil_growthrates.df$mu_uprCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Exponential")]),
fill = "#fccecb", colour = NA) +
# plot the 95% CI of the intrinsic growth rates as a ribbon
geom_ribbon(aes(ymin=Dil_growthrates.df$mu_lwrCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Stationary")],
ymax=Dil_growthrates.df$mu_uprCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Stationary")]),
fill = "#b0fdff", colour = NA) +
# add a vertical line for the threshold of detection (0.05)
geom_vline(xintercept = 0.17) +
# plot the derivatives as lines
geom_line(alpha=0.4) +
# and plot the intrinsic growth rate estimates from the TTD as dashed lines
geom_hline(yintercept = Dil_growthrates.df$mu[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Exponential")],
linetype="dashed", colour="#f8766d") +
geom_hline(yintercept = Dil_growthrates.df$mu[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Stationary")],
linetype="dashed", colour="#00bfc4") +
labs(title=paste(unique(Dil_growthrates.df$Species[which(Dil_growthrates.df$Sample == sam)]),
deg,"*C"),
colour="Inoculum",
x = "Total Biomass (OD at 600nm)",
y = "Per Capita Derivative"))
}
}
for(sam in c("BSC001", "BSC005", "BSC019", "CK101")){
for(deg in c(25, 30, 35, 40)){
print(ggplot(derivs.df %>% filter(Sample == sam,
Temp == deg,
baselinedOD > 0.02,
baselinedOD < 0.6),
aes(x=smth_baselinedOD, y=percap_deriv, colour=as.factor(Inoculum), group = uniqID)) +
# plot the 95% CI of the intrinsic growth rates as a ribbon
geom_ribbon(aes(ymin=Dil_growthrates.df$mu_lwrCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Exponential")],
ymax=Dil_growthrates.df$mu_uprCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Exponential")]),
fill = "#fccecb", colour = NA) +
# plot the 95% CI of the intrinsic growth rates as a ribbon
geom_ribbon(aes(ymin=Dil_growthrates.df$mu_lwrCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Stationary")],
ymax=Dil_growthrates.df$mu_uprCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Stationary")]),
fill = "#b0fdff", colour = NA) +
# add a vertical line for the threshold of detection (0.05)
geom_vline(xintercept = 0.15) +
# plot the derivatives as lines
geom_line(alpha=0.4) +
# and plot the intrinsic growth rate estimates from the TTD as dashed lines
geom_hline(yintercept = Dil_growthrates.df$mu[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Exponential")],
linetype="dashed", colour="#f8766d") +
geom_hline(yintercept = Dil_growthrates.df$mu[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Stationary")],
linetype="dashed", colour="#00bfc4") +
labs(title=paste(unique(Dil_growthrates.df$Species[which(Dil_growthrates.df$Sample == sam)]),
deg,"*C"),
colour="Inoculum",
x = "Total Biomass (OD at 600nm)",
y = "Per Capita Derivative"))
}
}
load("all_growthcurve_data.RData")
for(sam in c("BSC001", "BSC005", "BSC019", "CK101")){
for(deg in c(25, 30, 35, 40)){
print(ggplot(derivs.df %>% filter(Sample == sam,
Temp == deg,
baselinedOD > 0.02,
baselinedOD < 0.6),
aes(x=baselinedOD, y=percap_deriv, colour=as.factor(Inoculum), group = uniqID)) +
# plot the 95% CI of the intrinsic growth rates as a ribbon
geom_ribbon(aes(ymin=Dil_growthrates.df$mu_lwrCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Exponential")],
ymax=Dil_growthrates.df$mu_uprCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Exponential")]),
fill = "#fccecb", colour = NA) +
# plot the 95% CI of the intrinsic growth rates as a ribbon
geom_ribbon(aes(ymin=Dil_growthrates.df$mu_lwrCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Stationary")],
ymax=Dil_growthrates.df$mu_uprCI[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Stationary")]),
fill = "#b0fdff", colour = NA) +
# add a vertical line for the threshold of detection (0.05)
geom_vline(xintercept = 0.05) +
# plot the derivatives as lines
geom_line(alpha=0.4) +
# and plot the intrinsic growth rate estimates from the TTD as dashed lines
geom_hline(yintercept = Dil_growthrates.df$mu[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Exponential")],
linetype="dashed", colour="#f8766d") +
geom_hline(yintercept = Dil_growthrates.df$mu[which(Dil_growthrates.df$Sample == sam & Dil_growthrates.df$Temp == deg & Dil_growthrates.df$Inoculum == "Stationary")],
linetype="dashed", colour="#00bfc4") +
labs(title=paste(unique(Dil_growthrates.df$Species[which(Dil_growthrates.df$Sample == sam)]),
deg,"*C"),
colour="Inoculum",
x = "Total Biomass (OD at 600nm)",
y = "Per Capita Derivative"))
}
}
